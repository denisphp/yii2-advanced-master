---
# tasks file for deploy

- name: get current time
  shell: date +%s
  register: deploy_current_time

- set_fact:
    deploy_first_release: true
    is_local: "{{ansible_connection=='local'}}"
    deploy_dest_folder: "/var/www/{{ deploy_project_name }}/release/{{ deploy_current_time.stdout }}"

- name: remove previous version of project
  shell: chdir="/var/www/{{ deploy_project_name }}/release" ls -t | sed -e '1,{{ deploy_stored_releases }}d' | xargs -d '\n' rm -Rf
  ignore_errors: yes

- name: Create project folder
  file: path="{{ deploy_dest_folder }}" state=directory owner="{{ deploy_run_user }}" group="{{ deploy_run_group }}" mode="{{ deploy_folder_permissions }}"
  when: is_local == false

- name: Unarchive packed project
  unarchive: src="{{ deploy_src_prepare_pack }}/{{ deploy_name_prepare_pack }}" dest="{{ deploy_dest_folder }}" owner="{{ deploy_run_user }}" group="{{ deploy_run_group }}" mode="{{ deploy_folder_permissions }}"
  when: is_local == false

- name: remove prepeared project pack
  file: path="{{ deploy_src_prepare_pack }}/{{ deploy_name_prepare_pack }}" state=absent
  when: deploy_remove_prepare_pack and is_local == false
  delegate_to: "{{ deploy_delegate_to }}"

- name: Copy project
  shell: cp -ar "{{ deploy_src_prepare_pack_gitlab_ci }}" "{{ deploy_dest_folder }}"
  when: is_local

- name: composer install
  composer: working_dir="{{ deploy_dest_folder }}"
  when: deploy_install_composer

- name: be sure cgi-fcgi packages are installed
  apt: pkg="libfcgi0ldbl" state=present

- name: copy opcache_reset
  copy: src=../files/opcache_reset dest=/tmp/opcache_reset mode=0755

- name: Create directories for shared files
  file: path="/var/www/{{ deploy_project_name }}/shared/{{ item }}/" state=directory owner="{{ deploy_run_user }}" group="{{ deploy_run_group }}" mode="{{ deploy_folder_permissions }}"
  with_items: "{{ deploy_shared_folders }}"

- name: Synchronize shared files
  command: cp -R "{{ deploy_dest_folder }}/{{ item }}/" "/var/www/{{ deploy_project_name }}/shared/{{item}}/../"
  with_items: deploy_shared_folders

- name: Remove directories for shared files from release folder
  file: path="{{ deploy_dest_folder }}/{{ item }}/" state=absent
  with_items: "{{ deploy_shared_folders }}"

- name: Create symlink for shared
  file: src="/var/www/{{ deploy_project_name }}/shared/{{item}}/" dest="{{ deploy_dest_folder }}/{{ item }}" state=link
  with_items: "{{ deploy_shared_folders }}"

- shell: "if [ -d /var/www/{{ deploy_project_name }}/current/ ]; then return 0; else return 1; fi"
  register: deploy_current_dir_exists
  ignore_errors: true

- set_fact: deploy_first_release="{{deploy_current_dir_exists.rc == 1}}"

- name: Create directory for sql_dumps
  file: path="/var/www/{{ deploy_project_name }}/current/{{ deploy_project_name }}_sqldumps/" state=directory owner="{{ deploy_run_user }}" group="{{ deploy_run_group }}" mode="{{ deploy_folder_permissions }}"
  when: deploy_sql_dump_create and not deploy_first_release

- name: Create MySQL/MariaDb Dump
  mysql_db: >
    state=dump
    name=all
    target="/var/www/{{ deploy_project_name }}/current/{{ deploy_project_name }}_sqldumps/{{ deploy_project_name }}.sql"
    login_host="{{ deploy_sql_dump_host }}"
    login_user="{{ deploy_sql_dump_user }}"
    login_password="{{ deploy_sql_dump_user_password }}"
    login_port="{{ deploy_sql_dump_port }}"
  when: deploy_sql_dump_create and deploy_sql_dump_is_mysql and not deploy_sql_dump_is_pgsql and not deploy_first_release

- name: Create pgpass file
  template: src=pgpass.j2 dest=/tmp/.pgpass owner=postgres mode=600
  when: deploy_sql_dump_create and deploy_sql_dump_is_pgsql and not deploy_first_release

- name: Get list of databases for backup
  shell: "PGPASSFILE=/tmp/.pgpass psql {{ '-h ' + deploy_sql_dump_host if deploy_sql_dump_host else ''}} -U {{ deploy_sql_dump_user }}{{ (' -p %s' % deploy_sql_dump_port) if deploy_sql_dump_port else ''}} -At -c 'select datname from pg_database where not datistemplate and datallowconn order by datname;' postgres;"
  register: deploy_sql_dump_pgsql_tables
  when: deploy_sql_dump_create and deploy_sql_dump_is_pgsql and not deploy_first_release

- name: Create PostgreSQL Dump
  shell: "PGPASSFILE=/tmp/.pgpass pg_dump {{ item }} {{ '-h ' + deploy_sql_dump_host if deploy_sql_dump_host else ''}} -U {{ deploy_sql_dump_user }} {{ ('-p %s' % deploy_sql_dump_port) if deploy_sql_dump_port else ''}} -f '/var/www/{{ deploy_project_name }}/current/{{ deploy_project_name }}_sqldumps/{{ item }}.sql'"
  when: deploy_sql_dump_create and deploy_sql_dump_is_pgsql and not deploy_first_release
  with_items: deploy_sql_dump_pgsql_tables.stdout_lines

- name: Pack sqldump
  command: chdir="/var/www/{{ deploy_project_name }}/current/" tar -zcvf {{ deploy_project_name }}_sqldump.tar.gz "{{ deploy_project_name }}_sqldumps/"
  when: deploy_sql_dump_create and not deploy_first_release

- name: Remove sqldump
  file: path="/var/www/{{ deploy_project_name }}/current/{{ deploy_project_name }}_sqldumps/" state=absent
  when: deploy_sql_dump_create and not deploy_first_release

- name: Remove pgpass file
  file: path="/tmp/.pgpass" state=absent
  when: deploy_sql_dump_create and deploy_sql_dump_is_pgsql and not deploy_first_release

- name: Set permission chown for release
  shell: "chown -Rf {{ deploy_run_user }}:{{ deploy_run_group }} {{ deploy_dest_folder }}"

- name: Set permission chmod for release
  shell: "chmod -Rf {{ deploy_folder_permissions }} {{ deploy_dest_folder }}"

- name: Create symlink for release
  file: src="{{ deploy_dest_folder }}/" dest="/var/www/{{ deploy_project_name }}/current" state=link owner="{{ deploy_run_user }}" group="{{ deploy_run_group }}" mode="{{ deploy_folder_permissions }}"

- name: Reset OpCache
  shell: chdir="/tmp" ./opcache_reset -r 'var_dump(opcache_reset());' -connect "{{ deploy_path_to_php_fpm }}"
  ignore_errors: yes